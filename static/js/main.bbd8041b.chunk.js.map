{"version":3,"sources":["selectors.ts","actions.ts","Incrementer.tsx","ReduxRoot.tsx","redux-saga/sagas.ts","reducers/modal.ts","reducers/root.ts","reducers/count.ts","redux-loop/reducer.ts","index.tsx"],"names":["selectCount","state","count","selectShouldConfirmIncrement","confirmIncrement","payload","type","increment","openModal","closeModal","connect","modalOpen","modal","selectModalOpen","shouldConfirmIncrement","dispatch","accept","reject","_ref","react_default","a","createElement","onClick","lib_default","isOpen","onRequestClose","contentLabel","ReduxRoot","rootReducer","enhancer","_ref$afterCreateStore","afterCreateStore","title","_useState","useState","s","createStore","store","Object","slicedToArray","es","src_Incrementer","incrementWithConfirm","watchIncrementWithConfirm","rootSaga","accepted","regenerator_default","wrap","_context","prev","next","t0","select","t1","sent","put","take","all","concat","stop","_marked","this","_context2","takeEvery","_marked2","_context3","_marked3","root","combineReducers","arguments","length","undefined","initialState","reduceReducers","action","loop","Cmd","list","none","document","getElementById","Error","sagaMiddlware","createSagaMiddleware","Modal","setAppElement","ReactDOM","render","src_ReduxRoot","reducer","applyMiddleware","run","loopReducer","install"],"mappings":"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","file":"static/js/main.bbd8041b.chunk.js","sourcesContent":["import { State } from './reducers/root';\n\nexport const selectCount = (state: State) => state.count;\nexport const selectShouldConfirmIncrement = (state: State) =>\n  selectCount(state) >= 5;\nexport const selectModalOpen = (state: State) => state.modal;\n","import { Action } from './types/Action';\n\nexport const confirmIncrement = (payload: boolean): Action => ({\n  type: 'CONFIRM_INCREMENT',\n  payload\n});\n\nexport const maybeIncrement = (): Action => ({\n  type: 'MAYBE_INCREMENT'\n});\n\nexport const increment = (): Action => ({\n  type: 'INCREMENT'\n});\n\nexport const openModal = (): Action => ({\n  type: 'OPEN_MODAL'\n});\n\nexport const closeModal = (): Action => ({\n  type: 'CLOSE_MODAL'\n});\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  selectShouldConfirmIncrement,\n  selectCount,\n  selectModalOpen\n} from './selectors';\nimport { State } from './reducers/root';\nimport { confirmIncrement, maybeIncrement } from './actions';\nimport Modal from 'react-modal';\n\ninterface IncrementerProps {\n  increment: () => void;\n  modalOpen: boolean;\n  accept: () => void;\n  reject: () => void;\n  count: number;\n  shouldConfirmIncrement: boolean;\n}\n\nconst Incrementer = ({\n  increment,\n  modalOpen,\n  accept,\n  reject,\n  count,\n  shouldConfirmIncrement\n}: IncrementerProps) => (\n  <div>\n    <header>\n      <h2>Confirm increment</h2>\n    </header>\n    <section>Count: {count}</section>\n    <button onClick={increment}>\n      {shouldConfirmIncrement ? 'Maybe increment' : 'Increment'}\n    </button>\n    <Modal isOpen={modalOpen} onRequestClose={reject} contentLabel=\"Increment?\">\n      <h1>Increment?</h1>\n      <button onClick={accept}>Accept</button>\n      <button onClick={reject}>Reject</button>\n    </Modal>\n  </div>\n);\n\nexport default connect(\n  (state: State) => ({\n    modalOpen: selectModalOpen(state),\n    count: selectCount(state),\n    shouldConfirmIncrement: selectShouldConfirmIncrement(state)\n  }),\n  dispatch => ({\n    increment: () => dispatch(maybeIncrement()),\n    accept: () => dispatch(confirmIncrement(true)),\n    reject: () => dispatch(confirmIncrement(false))\n  })\n)(Incrementer);\n","import React, { useState } from 'react';\nimport { createStore, StoreEnhancer, Reducer } from 'redux';\nimport { Provider } from 'react-redux';\nimport Incrementer from './Incrementer';\n\ninterface Props<R> {\n  rootReducer: R;\n  enhancer: StoreEnhancer;\n  afterCreateStore?: () => void;\n  title: React.ReactNode;\n}\n\nconst ReduxRoot = <R extends Reducer>({\n  rootReducer,\n  enhancer,\n  afterCreateStore = () => {},\n  title\n}: Props<R>) => {\n  const [store] = useState(() => {\n    const s = createStore(rootReducer, enhancer);\n    afterCreateStore();\n    return s;\n  });\n\n  return (\n    <Provider store={store}>\n      <div>\n        <h1>{title}</h1>\n        <Incrementer />\n      </div>\n    </Provider>\n  );\n};\n\nexport default ReduxRoot;\n","import { all, put, takeEvery, take, select } from 'redux-saga/effects';\nimport { selectShouldConfirmIncrement } from '../selectors';\nimport { closeModal, openModal, increment } from '../actions';\n\nexport function* incrementWithConfirm() {\n  if (selectShouldConfirmIncrement(yield select())) {\n    yield put(openModal());\n    // payload is `any` here\n    // https://github.com/Microsoft/TypeScript/issues/2983\n    // https://github.com/redux-saga/redux-saga/issues/1504\n    const { payload } = yield take('CONFIRM_INCREMENT');\n    const accepted = payload ? [put(increment())] : [];\n    yield all([...accepted, put(closeModal())]);\n  } else {\n    yield put(increment());\n  }\n}\n\nexport function* watchIncrementWithConfirm() {\n  yield takeEvery('MAYBE_INCREMENT', incrementWithConfirm);\n}\n\nexport function* rootSaga() {\n  yield all([watchIncrementWithConfirm()]);\n}\n","import { Action } from '../types/Action';\n\ntype ModalState = boolean;\n\nexport default (state: ModalState = false, action: Action): ModalState => {\n  switch (action.type) {\n    case 'OPEN_MODAL': {\n      return true;\n    }\n    case 'CLOSE_MODAL': {\n      return false;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { combineReducers } from 'redux';\nimport modal from './modal';\nimport count from './count';\n\nconst root = combineReducers({\n  modal,\n  count\n});\n\nexport type State = ReturnType<typeof root>;\n\nexport default root;\n","import { Action } from '../types/Action';\n\ntype CountState = number;\n\nexport default (state: CountState = 0, action: Action): CountState => {\n  switch (action.type) {\n    case 'INCREMENT': {\n      return state + 1;\n    }\n    default: {\n      return state;\n    }\n  }\n};\n","import { Action } from '../types/Action';\nimport { loop, Cmd, Loop, reduceReducers } from 'redux-loop';\nimport { openModal, increment, closeModal } from '../actions';\nimport root, { State } from '../reducers/root';\nimport { selectShouldConfirmIncrement } from '../selectors';\n\n// Needed for reduce reducers\n// https://github.com/redux-loop/redux-loop/issues/160#issuecomment-441302122\nconst initialState = root(undefined, { type: '@@@@@' });\n\nconst effects = (\n  state: State = initialState,\n  action: Action\n): State | Loop<State, Action> => {\n  switch (action.type) {\n    case 'MAYBE_INCREMENT': {\n      return loop(\n        state,\n        Cmd.action(\n          selectShouldConfirmIncrement(state)\n            ? openModal()\n            : increment()\n        )\n      );\n    }\n    case 'CONFIRM_INCREMENT': {\n      return loop(\n        state,\n        Cmd.list([\n          Cmd.action(closeModal()),\n          // payload here is inferred correctly, unlike redux-saga\n          action.payload ? Cmd.action(increment()) : Cmd.none\n        ])\n      );\n    }\n    default: {\n      return state;\n    }\n  }\n};\n\nexport default reduceReducers(root, effects);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Modal from 'react-modal';\nimport { applyMiddleware } from 'redux';\nimport ReduxRoot from './ReduxRoot';\n\n// redux-saga imports\nimport createSagaMiddleware from 'redux-saga';\nimport { rootSaga } from './redux-saga/sagas';\nimport reducer from './reducers/root';\n\n// redux-loop imports\nimport { install } from 'redux-loop';\nimport loopReducer from './redux-loop/reducer';\n\nconst root = document.getElementById('root');\n\nif (root) {\n  const sagaMiddlware = createSagaMiddleware();\n  Modal.setAppElement(root);\n  ReactDOM.render(\n    <div>\n      {/* Test redux-saga setup */}\n      <ReduxRoot\n        rootReducer={reducer}\n        enhancer={applyMiddleware(sagaMiddlware)}\n        afterCreateStore={() => sagaMiddlware.run(rootSaga)}\n        title=\"Redux saga\"\n      />\n      {/* Test redux-loop setup */}\n      <ReduxRoot\n        rootReducer={loopReducer}\n        enhancer={install()}\n        title=\"Redux loop\"\n      />\n    </div>,\n    root\n  );\n} else {\n  throw new Error('Could not find in element #root');\n}\n"],"sourceRoot":""}